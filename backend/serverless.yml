service: certificate-vault-backend

frameworkVersion: "3"

provider:
  name: aws
  runtime: nodejs18.x
  region: ap-southeast-1
  stage: ${opt:stage, 'dev'}
  memorySize: 512
  environment:
    DB_CERTIFICATE_TABLE: !Ref certificateTable
    DB_CERTIFICATE_TABLE_EMAIL_INDEX: certificatesEmailIndex

custom:
  database:
    certificateTable: ${self:service}-certificates-${self:provider.stage}

plugins:
  - serverless-iam-roles-per-function

resources:
  Resources:
    certificateTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.database.certificateTable}
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: certificate_id
            AttributeType: S
          - AttributeName: user_email
            AttributeType: S
        KeySchema:
          - AttributeName: certificate_id
            KeyType: HASH
        GlobalSecondaryIndexes:
          - IndexName: ${self:provider.environment.DB_CERTIFICATE_TABLE_EMAIL_INDEX}
            KeySchema:
              - AttributeName: user_email
                KeyType: HASH
            Projection:
              ProjectionType: ALL

functions:
  createCertificate:
    handler: src/functions/certificates/index.createCertificate
    environment:
      AWS_NODEJS_CONNECTION_REUSE_ENABLED: 1
    iamRoleStatements:
      - Effect: Allow
        Action:
          - "dynamodb:PutItem"
        Resource: !GetAtt certificateTable.Arn
    events:
      - http:
          method: post
          cors: true
          path: /v1/certificate
  getCertificates:
    handler: src/functions/certificates/index.getCertificates
    environment:
      AWS_NODEJS_CONNECTION_REUSE_ENABLED: 1
    iamRoleStatements:
      - Effect: Allow
        Action:
          - "dynamodb:Query"
        Resource:
          - {
              "Fn::Join":
                [
                  "/",
                  [
                    { "Fn::GetAtt": ["certificateTable", "Arn"] },
                    "index",
                    "certificatesEmailIndex",
                  ],
                ],
            }
    events:
      - http:
          method: get
          cors: true
          path: /v1/certificate
  updateCertificate:
    handler: src/functions/certificates/index.updateCertificate
    environment:
      AWS_NODEJS_CONNECTION_REUSE_ENABLED: 1
    iamRoleStatements:
      - Effect: Allow
        Action:
          - "dynamodb:UpdateItem"
        Resource: !GetAtt certificateTable.Arn
    events:
      - http:
          method: put
          cors: true
          path: /v1/certificate/{certificateId}
